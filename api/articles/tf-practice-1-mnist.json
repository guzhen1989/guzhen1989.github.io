{"title":"TensorFlow练习一:mnist数字识别","slug":"tf-practice-1-mnist","date":"2018-11-04T04:22:13.000Z","updated":"2018-11-04T11:41:42.215Z","comments":true,"excerpt":"","content":"<h1 id=\"tensorflow官方示例\"><a href=\"#tensorflow官方示例\" class=\"headerlink\" title=\"tensorflow官方示例\"></a>tensorflow官方示例</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\"></span><br><span class=\"line\">(x_train, y_train),(x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">  tf.keras.layers.Flatten(),</span><br><span class=\"line\">  tf.keras.layers.Dense(<span class=\"number\">512</span>, activation=tf.nn.relu),</span><br><span class=\"line\">  tf.keras.layers.Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">  tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=tf.nn.softmax)</span><br><span class=\"line\">])</span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">'adam'</span>,</span><br><span class=\"line\">              loss=<span class=\"string\">'sparse_categorical_crossentropy'</span>,</span><br><span class=\"line\">              metrics=[<span class=\"string\">'accuracy'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, epochs=<span class=\"number\">5</span>)</span><br><span class=\"line\">model.evaluate(x_test, y_test)</span><br></pre></td></tr></table></figure>\n<p>运行结果:<br><img src=\"/img/tf1-20181104124539.png\" alt=\"\"></p>\n<p>分分钟跑到98%的准确率</p>\n<p>完毕！！！</p>\n<p>好吧，实际应用不会那么简单，所以下面主要实现用到大多数的步骤</p>\n<blockquote>\n<p>1、用Eager模式搭建原型<br><br>2、<strong>用Datasets处理数据</strong><br><br>3、用Feature Columns提取特征<br><br>4、<strong>用Keras搭建模型</strong><br><br>5、借用Canned Estimators<br><br>6、用SavedModel打包模型<br><br>来自<a href=\"https://juejin.im/post/5baae0afe51d450e6c74d0d5\" target=\"_blank\" rel=\"noopener\">《Google开发者大会：你不得不知的Tensorflow小技巧》</a></p>\n</blockquote>\n<h1 id=\"DataSet数据预处理\"><a href=\"#DataSet数据预处理\" class=\"headerlink\" title=\"DataSet数据预处理\"></a>DataSet数据预处理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getDataset</span><span class=\"params\">(x, y, batch_size=<span class=\"number\">32</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据转换，将x归一化，y变为one_hot向量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse_data</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tf.div(tf.cast(x, tf.float32), <span class=\"number\">255.0</span>), tf.one_hot(y, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    dataset = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class=\"line\">    <span class=\"comment\"># 数据集</span></span><br><span class=\"line\">    dataset = dataset.shuffle(<span class=\"number\">60000</span>)</span><br><span class=\"line\">                     .map(_parse_data)</span><br><span class=\"line\">                     .prefetch(batch_size * <span class=\"number\">10</span>)</span><br><span class=\"line\">                     .batch(batch_size)</span><br><span class=\"line\">                     .repeat(<span class=\"number\">100000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br></pre></td></tr></table></figure>\n<p><strong>from_tensor_slices</strong>： 初始化dataset，dataset会有多次数据复制，所以如果输入是图片的数组，可能会直接导致能存不够，所以此处的输入最好是图片地址这类不大的输入，具体图片处理由内部处理</p>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#from_tensor_slices\" target=\"_blank\" rel=\"noopener\">官网API</a></p>\n</blockquote>\n<p><strong>shuffle</strong>：洗牌，将数据随机组合</p>\n<p><strong>map</strong>：使用_parse_data函数逐条处理数据，一般情况下用户输入可以是一组图片地址，处理函数就可以加载图片，然后转化成需要的数据形式</p>\n<p><strong>prefetch</strong>：预加载，主要设置预加载的数据量</p>\n<p><strong>batch</strong>：批数据量</p>\n<p><strong>repeat</strong>：数据集重复次数</p>\n<p>使用dataset的顺序很重要，map要在shuffle之后，因为map处理后的数据将会变成很大的图片数据，如果shuffle的buffer_size大一些，就会导致内存不够（实际上buffer_size最好和数据集大小相同），如果在map之前处理，shuffle的实际是图片地址，相对来数内存可能没法处理10W图片，但10W地址字符串轻轻松松，这段主要是下面的神级回答的一个简单理解：</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/users/5098368/olivier-moindrot\" target=\"_blank\" rel=\"noopener\">Olivier Moindrot</a>的<a href=\"https://stackoverflow.com/questions/46444018/meaning-of-buffer-size-in-dataset-map-dataset-prefetch-and-dataset-shuffle\" target=\"_blank\" rel=\"noopener\">回答</a></p>\n</blockquote>\n<h1 id=\"Keras搭建模型\"><a href=\"#Keras搭建模型\" class=\"headerlink\" title=\"Keras搭建模型\"></a>Keras搭建模型</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义网络结构</span></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Flatten(input_shape=(<span class=\"number\">28</span>, <span class=\"number\">28</span>)),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">512</span>, activation=tf.nn.relu),</span><br><span class=\"line\">    tf.keras.layers.Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=tf.nn.softmax)</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">\"Adam\"</span>,</span><br><span class=\"line\">              loss=<span class=\"string\">\"categorical_crossentropy\"</span>,</span><br><span class=\"line\">              metrics=[<span class=\"string\">\"accuracy\"</span>])</span><br></pre></td></tr></table></figure>\n<p>keras接口确实方便所以这边也没有太多要说的，主要要提的一点是要在第一层指定input_shape，由于TensorFlow官网示例第一层直接是Flatten()，导致我在修改使用dataset的时候一直出问题，后来发现是input_shape没指定。如果想下原理其实也很简单，y=wx+b的w和x两个矩阵相乘形状必须满足[a,b]矩阵乘[b,c]得到[a,c]形状，参数数要匹配，所以必须是已知x的形状的，如果是卷积神经网络，在全连接层之前倒是可以不知道数据的形状</p>\n<h1 id=\"模型保存\"><a href=\"#模型保存\" class=\"headerlink\" title=\"模型保存\"></a>模型保存</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 常用callback</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCallBacks</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># tensorbord日志</span></span><br><span class=\"line\">    tensorboard = TensorBoard(log_dir=<span class=\"string\">\"./logs\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 保存最佳的模型</span></span><br><span class=\"line\">    checkpoint = ModelCheckpoint(filepath=<span class=\"string\">\"./mnist.h5\"</span>, save_best_only=<span class=\"keyword\">True</span>, monitor=<span class=\"string\">\"loss\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当学习停滞时，自动降低学习率</span></span><br><span class=\"line\">    reduceLROnPlateau = ReduceLROnPlateau(monitor=<span class=\"string\">\"loss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tensorboard, checkpoint, reduceLROnPlateau]</span><br></pre></td></tr></table></figure>\n<p>模型保存主要是使用ModelCheckpoint这个callback，这里另外的两个callback我觉的也比较重要，一个是TensorBoard可视化的，另一个是自动修改学习率的，具体参考自：</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/u/e95732444cf5\" target=\"_blank\" rel=\"noopener\">苟且偷生小屁屁</a>的<a href=\"https://www.jianshu.com/p/0711f9e54dd2\" target=\"_blank\" rel=\"noopener\">Keras保存最好的模型</a></p>\n</blockquote>\n<p>说道模型保存，就会有模型的加载：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model=tf.keras.models.load_model(<span class=\"string\">\"./mnist.h5\"</span>)</span><br><span class=\"line\">loss, accuracy = model.evaluate(x_test, tf.keras.utils.to_categorical(y_test, <span class=\"number\">10</span>))</span><br><span class=\"line\">print(loss, accuracy)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"整体代码\"><a href=\"#整体代码\" class=\"headerlink\" title=\"整体代码\"></a>整体代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.callbacks <span class=\"keyword\">import</span> TensorBoard</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.callbacks <span class=\"keyword\">import</span> ModelCheckpoint</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.callbacks <span class=\"keyword\">import</span> ReduceLROnPlateau</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用callback</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCallBacks</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># tensorbord日志</span></span><br><span class=\"line\">    tensorboard = TensorBoard(log_dir=<span class=\"string\">\"./logs\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 保存最佳的模型</span></span><br><span class=\"line\">    checkpoint = ModelCheckpoint(filepath=<span class=\"string\">\"./mnist.h5\"</span>, save_best_only=<span class=\"keyword\">True</span>, monitor=<span class=\"string\">\"loss\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当学习停滞时，自动降低学习率</span></span><br><span class=\"line\">    reduceLROnPlateau = ReduceLROnPlateau(monitor=<span class=\"string\">\"loss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tensorboard, checkpoint, reduceLROnPlateau]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getDataset</span><span class=\"params\">(x, y, batch_size=<span class=\"number\">32</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据转换，将x归一化，y变为one_hot向量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse_data</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tf.div(tf.cast(x, tf.float32), <span class=\"number\">255.0</span>), tf.one_hot(y, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    dataset = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class=\"line\">    <span class=\"comment\"># 数据集</span></span><br><span class=\"line\">    dataset = dataset.shuffle(<span class=\"number\">60000</span>).map(_parse_data).prefetch(batch_size * <span class=\"number\">10</span>).batch(batch_size).repeat(<span class=\"number\">100000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义网络结构</span></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Flatten(input_shape=(<span class=\"number\">28</span>, <span class=\"number\">28</span>)),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">512</span>, activation=tf.nn.relu),</span><br><span class=\"line\">    tf.keras.layers.Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=tf.nn.softmax)</span><br><span class=\"line\">])</span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">\"Adam\"</span>,</span><br><span class=\"line\">              loss=<span class=\"string\">\"categorical_crossentropy\"</span>,</span><br><span class=\"line\">              metrics=[<span class=\"string\">\"accuracy\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#训练</span></span><br><span class=\"line\">model.fit(getDataset(x_train, y_train), epochs=<span class=\"number\">1</span>, callbacks=getCallBacks(), steps_per_epoch=<span class=\"number\">2000</span>)</span><br><span class=\"line\">loss, accuracy = model.evaluate(x_test, tf.keras.utils.to_categorical(y_test, <span class=\"number\">10</span>))</span><br><span class=\"line\">print(loss, accuracy)</span><br></pre></td></tr></table></figure>\n<h1 id=\"额外：用SavedModel打包模型\"><a href=\"#额外：用SavedModel打包模型\" class=\"headerlink\" title=\"额外：用SavedModel打包模型\"></a>额外：用SavedModel打包模型</h1><p>TensorFlow小技巧推荐使用SavedModel打包模型，模型打包后配合TensorFlow Serving直接上线使用了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">export_savedmodel</span><span class=\"params\">(model)</span>:</span></span><br><span class=\"line\">    model_path = <span class=\"string\">\"model\"</span></span><br><span class=\"line\">    model_version = <span class=\"number\">1</span></span><br><span class=\"line\">    model_signature = tf.saved_model.signature_def_utils.predict_signature_def(</span><br><span class=\"line\">        inputs=&#123;<span class=\"string\">'input'</span>: model.input&#125;, outputs=&#123;<span class=\"string\">'output'</span>: model.output&#125;)</span><br><span class=\"line\">    export_path = os.path.join(compat.as_bytes(model_path), compat.as_bytes(str(model_version)))</span><br><span class=\"line\"></span><br><span class=\"line\">    builder = tf.saved_model.builder.SavedModelBuilder(export_path)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.keras.backend.get_session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">        builder.add_meta_graph_and_variables(</span><br><span class=\"line\">            sess=sess,</span><br><span class=\"line\">            tags=[tf.saved_model.tag_constants.SERVING],</span><br><span class=\"line\">            clear_devices=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">            signature_def_map=&#123;</span><br><span class=\"line\">                tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY:</span><br><span class=\"line\">                    model_signature</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    builder.save()</span><br></pre></td></tr></table></figure></p>\n<p>运行得到模型：<br><img src=\"/img/model.png\" alt=\"\"></p>\n<blockquote>\n<p>参考自<a href=\"https://www.zhihu.com/people/tobegit3hub\" target=\"_blank\" rel=\"noopener\">tobe</a>的<a href=\"https://zhuanlan.zhihu.com/p/34471266\" target=\"_blank\" rel=\"noopener\">我们给你推荐一种TensorFlow模型格式</a></p>\n</blockquote>\n","thumbnail":"img/mikoto.jpg","categories":[],"tags":[{"name":"TensorFlow","path":"api/tags/TensorFlow.json"}]}